---
# Namespace for Authentik
apiVersion: v1
kind: Namespace
metadata:
  name: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/instance: authentik
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd/flux2/main/docs/spec/v1beta1/helmrepository.yaml
# Helm Repository for Authentik
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: authentik
  namespace: authentik
spec:
  interval: 1h
  url: https://charts.goauthentik.io
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/spotahome/redis-operator/master/config/crd/bases/databases.spotahome.com_redisfailovers.yaml
# RedisFailover for Authentik, used by Authentik for caching and task queues.
apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: authentik-redis
  namespace: authentik
spec:
  sentinel:
    replicas: 3
  redis:
    replicas: 3
---
# App user credentials for the initial DB owner
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: es-authentik-db-creds
  namespace: authentik
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: authentik-db-creds
    creationPolicy: Owner
  data:
    - secretKey: username
      remoteRef:
        key: /AUTHENTIK/CNPG-USERNAME
    - secretKey: password
      remoteRef:
        key: /AUTHENTIK/CNPG-PASSWORD
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/external-secrets/external-secrets/main/config/crd/bases/external-secrets.io_externalsecrets.yaml
# Secret key for Authentik
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: es-authentik-secret-key
  namespace: authentik
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: authentik-secret-key
    creationPolicy: Owner
  data:
    - secretKey: secret_key
      remoteRef:
        key: /AUTHENTIK/SECRET-KEY
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/config/crd/bases/postgresql.cnpg.io_clusters.yaml
# CloudNativePG Cluster â€” creates an "authentik" database owned by user "authentik"
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: authentik-db
  namespace: authentik
spec:
  instances: 2
  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
    podAntiAffinityType: preferred

  storage:
    # Set your storageClass if needed (commented out to use cluster default)
    size: 5Gi

  bootstrap:
    initdb:
      database: authentik # database to create
      owner: authentik # owner of that database
      secret:
        name: authentik-db-creds # takes username/password from this Secret

  monitoring:
    enablePodMonitor: true
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: authentik
  namespace: authentik
spec:
  valuesFrom:
    - kind: Secret
      name: authentik-secret-key
      valuesKey: secret_key
      targetPath: authentik.secret_key
  chart:
    spec:
      chart: authentik
      version: 2025.8.1
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: authentik
        name: authentik
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    global:
      priorityClassName: system-cluster-critical

      deploymentAnnotations:
        secret.reloader.stakater.com/reload: authentik-db-creds,authentik-secret-key,wildcard-le-tls-cert

      env:
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: authentik-db-creds
              key: password
        - name: AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__HOST
          value: authentik-db-ro.authentik.svc
        - name: AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__NAME
          value: authentik
        - name: AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__USER
          value: authentik
        - name: AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__PORT
          value: "5432"
        - name: AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__PASSWORD
          valueFrom:
            secretKeyRef:
              name: authentik-db-creds
              key: password
        - name: AUTHENTIK_COOKIE_DOMAIN
          value: .${DOMAIN}

    authentik:
      # This sends anonymous usage-data, stack traces on errors and
      # performance data to sentry.beryju.org, and is fully opt-in
      error_reporting:
        enabled: false
      disable_update_check: true
      disable_startup_analytics: true

      postgresql:
        host: authentik-db-rw.authentik.svc
        port: 5432
        name: authentik
        user: authentik

      redis:
        host: rfrm-authentik-redis.authentik.svc
        port: 6379

      log_level: info

    server:
      replicas: 2

      containerSecurityContext:
        readOnlyRootFilesystem: true

      startupProbe:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 30

      readinessProbe:
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 30

      ingress:
        enabled: true
        ingressClassName: tenant-root
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: "16m"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_TARGET_AUTHENTIK}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/hostname: "auth.${DOMAIN}"
        hosts:
          - auth.${DOMAIN}
        tls:
          - secretName: wildcard-le-tls-cert
            hosts:
              - auth.${DOMAIN}

      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          interval: 1m

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: authentik
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/component: server

    worker:
      replicas: 2
      containerSecurityContext:
        readOnlyRootFilesystem: true

      startupProbe:
        initialDelaySeconds: 45
        periodSeconds: 10
        failureThreshold: 30

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: authentik
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/component: worker
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authentik-server-pdb
  namespace: authentik
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: authentik
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/component: server
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authentik-worker-pdb
  namespace: authentik
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: authentik
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/component: worker
---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: egress-authentik
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  egress:
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: authentik
            app.kubernetes.io/name: authentik
      toPorts:
        - ports:
            - port: "9000" # authentik server port
---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: ingress-authentik
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: authentik
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/component: server
  ingress:
    - fromEntities:
        - host
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/name: ingress-nginx
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: authentik-egress
  namespace: authentik
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: authentik
  egress:
    # PostgreSQL RW Service
    - toServices:
        - k8sService:
            namespace: authentik
            serviceName: authentik-db-rw
      toPorts:
        - ports:
            - port: "5432"
    # PostgreSQL RO Service (used by read replicas)
    - toServices:
        - k8sService:
            namespace: authentik
            serviceName: authentik-db-ro
      toPorts:
        - ports:
            - port: "5432"
    # Redis Sentinel service (Spotahome RFS service)
    - toServices:
        - k8sService:
            namespace: authentik
            serviceName: rfs-authentik-redis
      toPorts:
        - ports:
            - port: "26379"
    # Redis master service (data port)
    - toServices:
        - k8sService:
            namespace: authentik
            serviceName: rfr-authentik-redis
      toPorts:
        - ports:
            - port: "6379"
    # DNS to CoreDNS service
    - toServices:
        - k8sService:
            namespace: kube-system
            serviceName: kube-dns
      toPorts:
        - ports:
            - port: "53"
              protocol: UDP
            - port: "53"
              protocol: TCP
