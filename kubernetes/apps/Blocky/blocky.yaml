apiVersion: v1
kind: Namespace
metadata:
  name: blocky
  labels:
    ingress.svc.egress: allow
    app.kubernetes.io/name: blocky
    pod-security.kubernetes.io/enforce: privileged
    tenant.cozystack.io/tenant-root: ""
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/external-secrets/kubernetes-external-secrets/main/deploy/crds/external-secrets.io_externalsecret.yaml
# ConfigMap that contains the Blocky configuration file.
# Docs: https://0xerr0r.github.io/blocky/latest/configuration/
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: se-blocky-config
  namespace: blocky
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: blocky-config
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        config.yml: "{{ .config_yml }}"
  data:
    - secretKey: config_yml
      remoteRef:
        key: /BLOCKY/CONFIG
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/spotahome/redis-operator/master/config/crd/bases/databases.spotahome.com_redisfailovers.yaml
# RedisFailover for Blocky, used for syncing the Blocky cache between multiple replicas.
apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: blocky-redis
  namespace: blocky
spec:
  sentinel:
    replicas: 3
  redis:
    replicas: 3
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
# HelmRelease for Blocky, a DNS server for ad-blocking and more.
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: blocky
  namespace: blocky
spec:
  interval: 10m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  timeout: 10m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: cozy-fluxcd
  values:
    controllers:
      blocky:
        annotations:
          reloader.stakater.com/match: blocky-config, wildcard-le-tls-cert-myk8s-se
        type: daemonset
        enabled: true

        containers:
          app:
            image:
              repository: ghcr.io/0xerr0r/blocky
              tag: v0.26.2@sha256:46150ee0a8a414170ac861343ab7640eb0182a736f7d59f4c0c41383443932fd

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5

    service:
      blocky:
        controller: blocky
        type: LoadBalancer
        annotations:
          metallb.universe.tf/address-pool: cozystack
        externalIPs:
          - 192.168.222.100
        ports:
          dns:
            port: 53
            protocol: UDP
          dns-tcp:
            port: 53
            protocol: TCP
          doh:
            port: 443
            protocol: TCP
          dot:
            port: 853
            protocol: TCP

    ingress:
      blocky:
        enabled: true
        className: tenant-root
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_TARGET}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/hostname: "blocky.${DOMAIN}"
        hosts:
          - host: blocky.${DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - blocky.${DOMAIN}
            secretName: wildcard-le-tls-cert-myk8s-se

    persistence:
      config:
        enabled: true
        type: secret
        name: blocky-config
        items:
          - key: config.yml
            path: config.yml
        globalMounts:
          - path: /app/config.yml
            subPath: config.yml
      tls-cert:
        type: secret
        name: wildcard-le-tls-cert-myk8s-se
        globalMounts:
          - path: /tls
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all
  namespace: blocky
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - {}
  egress:
    - {}
---
# webhook
# yaml-language-server: $schema=https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/main/deploy/upstream/quickstart/crds/operators.operatorframework.io_clusterserviceversions.yaml
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMServiceScrape
metadata:
  name: blocky-webhook
  namespace: blocky
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: blocky
      app.kubernetes.io/name: blocky
  namespaceSelector:
    matchNames: ["blocky"]
  endpoints:
    - port: doh
      path: /metrics
      interval: 30s
      honorLabels: true
      scheme: https
      tlsConfig:
        insecureSkipVerify: true
---
# Grafana dashboard for Cert-Manager.
# not working - need troubleshooting...
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: blocky
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  folder: blocky
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  url: "https://grafana.com/api/dashboards/13768/revisions/6/download"

---
# Grafana datasource for Blocky Postgres database.
# yaml-language-server: $schema=https://raw.githubusercontent.com/grafana-operator/grafana-operator/main/config/crd/bases/grafana.integreatly.org_grafanadatasources.yaml
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDatasource
metadata:
  name: blocky-postgres
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  datasource:
    name: Blocky Postgres
    type: postgres
    isDefault: false
    url: blocky-db-rw.blocky.svc:5432
    database: blocky
    user: blocky
    access: proxy
    jsonData:
      postgresVersion: 1500
      sslmode: disable
      timescaledb: false
    secureJsonData:
      password: "changeme"
  valuesFrom:
    - targetPath: user
      valueFrom:
        secretKeyRef:
          name: blocky-db-creds
          key: username
    - targetPath: secureJsonData.password
      valueFrom:
        secretKeyRef:
          name: blocky-db-creds
          key: password
---
# Grafana dashboard for Blocky Postgres database.
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: blocky-pg-dashboard
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  folder: blocky
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  url: "https://grafana.com/api/dashboards/17996/revisions/13/download"
---
# NetworkPolicy to allow Grafana (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-grafana-to-blocky-pg
  namespace: blocky
spec:
  podSelector:
    matchLabels:
      cnpg.io/cluster: blocky-db # label on your CNPG pods
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: tenant-root
          podSelector:
            matchLabels:
              app: grafana # adjust if your grafana pods use different labels
      ports:
        - protocol: TCP
          port: 5432
---
# NetworkPolicy to allow Grafana (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-egress-to-blocky-postgres
  namespace: tenant-root
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
    - Egress
  egress:
    # Allow Grafana -> any pod in "blocky" namespace on TCP/5432
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: blocky
      ports:
        - protocol: TCP
          port: 5432
    # (Optional) DNS for Grafana
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
# CiliumNetworkPolicy to allow Grafana ingress traffic (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-grafana-to-blockydbro
  namespace: tenant-root
spec:
  endpointSelector:
    matchLabels:
      app: grafana
  egress:
    - toServices:
        - k8sService:
            namespace: blocky
            serviceName: blocky-db-ro
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP
---
# CiliumNetworkPolicy to allow Grafana ingress traffic (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-grafana-to-blockydbro-ingress
  namespace: blocky
spec:
  endpointSelector:
    matchLabels:
      k8s:cnpg.io/cluster: blocky-db
  ingress:
    - fromEndpoints:
        - matchLabels:
            k8s:app: grafana
            k8s:io.kubernetes.pod.namespace: tenant-root
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP
---
# CiliumNetworkPolicy to allow Grafana egress traffic (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-grafana-to-blockydbro-egress-to-endpoints
  namespace: tenant-root
spec:
  endpointSelector:
    matchLabels:
      app: grafana
  egress:
    - toEndpoints:
        - matchLabels:
            k8s:cnpg.io/cluster: blocky-db
            k8s:io.kubernetes.pod.namespace: blocky
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP
