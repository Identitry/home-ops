---
# yaml-language-server: $schema=https://raw.githubusercontent.com/external-secrets/kubernetes-external-secrets/main/deploy/crds/external-secrets.io_externalsecret.yaml
# Secret that contains the Gluetun WireGuard VPN settings.
# Docs: https://0xerr0r.github.io/blocky/latest/configuration/
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: es-blocky-gluetun-wg
  namespace: blocky
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: blocky-gluetun-wg
    creationPolicy: Owner
  data:
    - secretKey: WIREGUARD_PRIVATE_KEY
      remoteRef:
        key: /GLUETUN/WIREGUARD_PRIVATE_KEY
    - secretKey: SERVER_COUNTRIES
      remoteRef:
        key: /GLUETUN/SERVER_COUNTRIES
    - secretKey: VPN_SERVICE_PROVIDER
      remoteRef:
        key: /GLUETUN/VPN_SERVICE_PROVIDER
    - secretKey: FIREWALL_OUTBOUND_SUBNETS
      remoteRef:
        key: /GLUETUN/FIREWALL_OUTBOUND_SUBNETS
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/external-secrets/kubernetes-external-secrets/main/deploy/crds/external-secrets.io_externalsecret.yaml
# ExternalSecret that contains the Blocky configuration file.
# Docs: https://0xerr0r.github.io/blocky/latest/configuration/
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: es-blocky-config
  namespace: blocky
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: blocky-config
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        config.yml: "{{ .config_yml }}"
  data:
    - secretKey: config_yml
      remoteRef:
        key: /BLOCKY/CONFIG
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/spotahome/redis-operator/master/config/crd/bases/databases.spotahome.com_redisfailovers.yaml
# RedisFailover for Blocky, used for syncing the Blocky cache between multiple replicas.
apiVersion: databases.spotahome.com/v1
kind: RedisFailover
metadata:
  name: blocky-redis
  namespace: blocky
spec:
  sentinel:
    replicas: 3
  redis:
    replicas: 3
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
# HelmRelease for Blocky, a DNS server for ad-blocking and more.
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: blocky
  namespace: blocky
spec:
  interval: 10m
  install:
    disableWait: true
    remediation:
      retries: 3
  upgrade:
    disableWait: true
    remediation:
      retries: 3
  timeout: 10m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: cozy-fluxcd
  values:
    controllers:
      blocky:
        annotations:
          reloader.stakater.com/match: blocky-config, blocky-gluetun-wg, wildcard-le-tls-cert
        type: daemonset

        initContainers:
          vpn:
            image:
              repository: qmcgaw/gluetun
              tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
              pullPolicy: IfNotPresent
            restartPolicy: Always
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                add:
                  - NET_ADMIN
            envFrom:
              - secretRef:
                  name: blocky-gluetun-wg
            env:
              VPN_TYPE: "wireguard"
              DNS_PLAINTEXT_ADDRESS: "10.96.0.10" # <- set to your kube-dns IP
              FIREWALL_INPUT_PORTS: "53,853,443" # <- let DNS/DoT/DoH reach Blocky
              HEALTH_VPN_DURATION_INITIAL: 120s
              HEALTH_SUCCESS_WAIT_DURATION: 120s
              DOT: "off"
              TZ: ${TZ}
              VERSION_INFORMATION: "off"
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  exec: &exec
                    command: [/gluetun-entrypoint, healthcheck]
                  periodSeconds: 60
              startup:
                <<: *probe
                spec:
                  exec: *exec
                  periodSeconds: 5

          wait-vpn:
            image:
              repository: busybox
              tag: v1.37.0@sha256:182014572d8981d8323fe9944876f63b39694e16ce08ae6296e97686c52b150c
              pullPolicy: IfNotPresent
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
            command:
              - sh
              - -c
              - |
                echo "Waiting for Gluetun tunnel connectivity..."
                while ! (nc -z -w3 1.1.1.1 53 || nc -z -w3 8.8.8.8 53); do
                  echo "Check failed, retrying in 5 seconds..."
                  sleep 5
                done
                echo "Connectivity OK, proceeding"

        containers:
          app:
            image:
              repository: ghcr.io/0xerr0r/blocky
              tag: v0.26.2@sha256:46150ee0a8a414170ac861343ab7640eb0182a736f7d59f4c0c41383443932fd

            ports:
              - name: dns
                containerPort: 53
                protocol: UDP
              - name: dns-tcp
                containerPort: 53
                protocol: TCP
              - name: doh
                containerPort: 443
                protocol: TCP
              - name: dot
                containerPort: 853
                protocol: TCP

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5

    service:
      blocky:
        controller: blocky
        type: LoadBalancer
        annotations:
          metallb.io/address-pool: cozystack
        loadBalancerIP: 192.168.222.100
        ports:
          dns:
            port: 53
            protocol: UDP
          dns-tcp:
            port: 53
            protocol: TCP
          doh:
            port: 443
            protocol: TCP
          dot:
            port: 853
            protocol: TCP

    ingress:
      blocky:
        enabled: true
        className: tenant-root
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_TARGET}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/hostname: "blocky.${DOMAIN}"
        hosts:
          - host: blocky.${DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - blocky.${DOMAIN}
            secretName: wildcard-le-tls-cert
      blocky-doh:
        className: tenant-root
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          external-dns.alpha.kubernetes.io/enable: "false"
        hosts:
          - host: doh.${DOMAIN}
            paths:
              - path: /dns-query
                pathType: Prefix
                service:
                  port: doh
        tls:
          - hosts:
              - doh.${DOMAIN}
            secretName: wildcard-le-tls-cert

    persistence:
      config:
        enabled: true
        type: secret
        name: blocky-config
        items:
          - key: config.yml
            path: config.yml
        globalMounts:
          - path: /app/config.yml
            subPath: config.yml
      tls-cert:
        type: secret
        name: wildcard-le-tls-cert
        globalMounts:
          - path: /tls
