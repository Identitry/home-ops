---
# App user credentials for the initial DB owner
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: se-blocky-db-creds
  namespace: blocky
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: blocky-db-creds
    creationPolicy: Owner
  data:
    - secretKey: username
      remoteRef:
        key: /BLOCKY/CNPG-USERNAME
    - secretKey: password
      remoteRef:
        key: /BLOCKY/CNPG-PASSWORD
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/config/crd/bases/postgresql.cnpg.io_clusters.yaml
# CloudNativePG Cluster â€” creates a "blocky" database owned by user "blocky"
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: blocky-db
  namespace: blocky
spec:
  instances: 1

  # Use the operator's supported default image, or pin a version explicitly:
  # imageName: ghcr.io/cloudnative-pg/postgresql:16.4

  storage:
    # Set your storageClass if needed (commented out to use cluster default)
    # storageClass: longhorn
    size: 5Gi

  # OPTIONAL: if you want postgres superuser access with a known password, set:
  # enableSuperuserAccess: true
  # superuserSecret:
  #   name: blocky-db-superuser

  bootstrap:
    initdb:
      database: blocky # database to create
      owner: blocky # owner of that database
      secret:
        name: blocky-db-creds # takes username/password from this Secret

  monitoring:
    enablePodMonitor: true
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all
  namespace: blocky
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - {}
  egress:
    - {}
---
# webhook
# yaml-language-server: $schema=https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/main/deploy/upstream/quickstart/crds/operators.operatorframework.io_clusterserviceversions.yaml
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMServiceScrape
metadata:
  name: blocky-webhook
  namespace: blocky
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: blocky
      app.kubernetes.io/name: blocky
  namespaceSelector:
    matchNames: ["blocky"]
  endpoints:
    - port: doh
      path: /metrics
      interval: 30s
      honorLabels: true
      scheme: https
      tlsConfig:
        insecureSkipVerify: true
---
# Grafana dashboard for Cert-Manager.
# not working - need troubleshooting...
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: blocky
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  folder: blocky
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  url: "https://grafana.com/api/dashboards/13768/revisions/6/download"

---
# Grafana datasource for Blocky Postgres database.
# yaml-language-server: $schema=https://raw.githubusercontent.com/grafana-operator/grafana-operator/main/config/crd/bases/grafana.integreatly.org_grafanadatasources.yaml
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDatasource
metadata:
  name: blocky-postgres
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  datasource:
    name: Blocky Postgres
    type: postgres
    isDefault: false
    url: blocky-db-ro.blocky.svc:5432
    database: blocky
    user: blocky
    access: proxy
    jsonData:
      postgresVersion: 1500
      sslmode: disable
      timescaledb: false
    secureJsonData:
      password: "changeme"
  valuesFrom:
    - targetPath: user
      valueFrom:
        secretKeyRef:
          name: blocky-db-creds
          key: username
    - targetPath: secureJsonData.password
      valueFrom:
        secretKeyRef:
          name: blocky-db-creds
          key: password
---
# Grafana dashboard for Blocky Postgres database.
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: blocky-pg-dashboard
  namespace: blocky
spec:
  allowCrossNamespaceImport: true
  folder: blocky
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  url: "https://grafana.com/api/dashboards/17996/revisions/13/download"
---
# CiliumNetworkPolicy to allow Grafana ingress traffic (in tenant-root namespace) to access Blocky Postgres database.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-grafana-to-blockydbro
  namespace: tenant-root
spec:
  endpointSelector:
    matchLabels:
      app: grafana
  egress:
    - toServices:
        - k8sService:
            namespace: blocky
            serviceName: blocky-db-ro
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": blocky
            "k8s:cnpg.io/cluster": blocky-db
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP

---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-ingress-from-grafana-to-blockydb
  namespace: blocky
spec:
  endpointSelector:
    matchLabels:
      cnpg.io/cluster: blocky-db
  ingress:
    - fromEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": tenant-root
            "k8s:app": grafana
      toPorts:
        - ports:
            - port: "5432"
              protocol: TCP
---
# Temp CiliumNetworkPolicy to allow all egress from Grafana for debugging purposes.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: grafana-egress-debug-allow-all
  namespace: tenant-root
spec:
  endpointSelector:
    matchLabels:
      app: grafana
  egress:
    - toEntities:
        - cluster
