---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qbittorrent-config
  namespace: media
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
  storageClassName: local
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/external-secrets/kubernetes-external-secrets/main/deploy/crds/external-secrets.io_externalsecret.yaml
# Secret that contains the Gluetun WireGuard VPN settings.
# Docs: https://0xerr0r.github.io/blocky/latest/configuration/
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: es-media-gluetun-wg
  namespace: media
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: infisical
  target:
    name: media-gluetun-wg
    creationPolicy: Owner
  data:
    - secretKey: WIREGUARD_PRIVATE_KEY
      remoteRef:
        key: /GLUETUN/WIREGUARD_PRIVATE_KEY
    - secretKey: SERVER_COUNTRIES
      remoteRef:
        key: /GLUETUN/SERVER_COUNTRIES
    - secretKey: VPN_SERVICE_PROVIDER
      remoteRef:
        key: /GLUETUN/VPN_SERVICE_PROVIDER
    - secretKey: DNS_PLAINTEXT_ADDRESS
      remoteRef:
        key: /GLUETUN/DNS_PLAINTEXT_ADDRESS
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
# QBitTorrent/Gluetun Helm release.
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: qbittorrent
  namespace: media
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: cozy-fluxcd
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      qbittorrent:
        annotations:
          reloader.stakater.com/match: wildcard-le-tls-cert,media-gluetun-wg

        initContainers:
          vpn:
            image:
              repository: qmcgaw/gluetun
              tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
              pullPolicy: IfNotPresent
            restartPolicy: Always
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                add:
                  - NET_ADMIN
            envFrom:
              - secretRef:
                  name: media-gluetun-wg
            env:
              VPN_TYPE: "wireguard"
              HEALTH_VPN_DURATION_INITIAL: 120s
              HEALTH_SUCCESS_WAIT_DURATION: 120s
              FIREWALL_INPUT_PORTS: "8080"
              FIREWALL_OUTBOUND_SUBNETS: "10.96.0.0/12,10.244.0.0/16,192.168.222.0/24"
              TZ: ${TZ}
              VERSION_INFORMATION: "off"
              DNS_PLAINTEXT_ADDRESS: "10.96.188.241"
              BLOCK_MALICIOUS: "off"
              BLOCK_SURVEILLANCE: "off"
              BLOCK_ADS: "off"
              DNS_UPDATE_PERIOD: "0"
              WIREGUARD_MTU: "1280"
              PUBLICIP_API: cloudflare
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  exec: &exec
                    command: [/gluetun-entrypoint, healthcheck]
                  periodSeconds: 60
              startup:
                <<: *probe
                spec:
                  exec: *exec
                  periodSeconds: 5
                  failureThreshold: 120
                  timeoutSeconds: 5

          #wait-vpn:
          #  image:
          #    repository: busybox
          #    tag: v1.37.0@sha256:a2c55ed708c564a69a695e0a3bb16a4c47d2bb268d2ebd06f0d77336801b80de
          #    pullPolicy: IfNotPresent
          #  securityContext:
          #    readOnlyRootFilesystem: true
          #    allowPrivilegeEscalation: false
          #  command:
          #    - sh
          #    - -c
          #    - |
          #      echo "Waiting for Gluetun tunnel connectivity..."
          #      until wget -q --spider http://127.0.0.1:8000/health; do
          #        echo "Glutetun not healthy yet, retrying in 2s..."
          #        sleep 2
          #      done
          #      echo "Connectivity OK, proceeding"

        containers:
          app:
            image:
              repository: ghcr.io/home-operations/qbittorrent
              tag: 5.1.2@sha256:9dd0164cc23e9c937e0af27fd7c3f627d1df30c182cf62ed34d3f129c55dc0e8
              pullPolicy: IfNotPresent
            env:
              TZ: ${TZ}
              QBITTORRENT__BT_PORT: 6881
            probes:
              liveness: &probe
                enabled: true
                type: HTTP
                path: /
                port: http
              readiness: *probe
              startup:
                <<: *probe
                spec:
                  failureThreshold: 60
                  periodSeconds: 5
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities: { drop: [ALL] }
            ports:
              - name: http
                containerPort: 8080
                protocol: TCP
              - name: bittorrent
                containerPort: 6881
                protocol: TCP
              - name: bittorrent-udp
                containerPort: 6881
                protocol: UDP
        pod:
          securityContext:
            fsGroupChangePolicy: OnRootMismatch
            seccompProfile: { type: RuntimeDefault }

      vuetorrent:
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/gabe565/vuetorrent
              tag: 2.23.1-nonroot@sha256:e8ffc548bbe956483996ec8ccf61b7fe34a6b90ae25bf15664104da6863d635f
              pullPolicy: IfNotPresent
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            ports:
              - name: http
                containerPort: 80
                protocol: TCP
            probes:
              startup:
                enabled: true
                type: HTTP
                path: /
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
        pod:
          securityContext:
            runAsNonRoot: true
            #allowPrivilegeEscalation: false
            runAsUser: 101
            runAsGroup: 101
            seccompProfile: { type: RuntimeDefault }

    persistence:
      config:
        existingClaim: qbittorrent-config
        advancedMounts:
          qbittorrent:
            app:
              - path: /config
      media:
        type: persistentVolumeClaim
        existingClaim: media-rwx
        globalMounts:
          - path: /media
      tmp:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /tmp
        advancedMounts:
          vuetorrent:
            app:
              - path: /var/cache/nginx
                subPath: nginx/cache
              - path: /var/run
                subPath: nginx/run

    service:
      qbittorrent:
        controller: qbittorrent
        ports:
          http:
            port: 8080
            targetPort: http
      vuetorrent:
        controller: vuetorrent
        ports:
          http:
            port: 80

    ingress:
      qbittorrent:
        className: tenant-root
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_TARGET}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/hostname: "qbt.${DOMAIN}"
        hosts:
          - host: qbt.${DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: qbittorrent
                  port: 8080
        tls:
          - hosts:
              - qbt.${DOMAIN}
            secretName: wildcard-le-tls-cert

      vuetorrent:
        className: tenant-root
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_TARGET}
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/hostname: "qbt-vue.${DOMAIN}"
        hosts:
          - host: qbt-vue.${DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: vuetorrent
                  port: http
              - path: /api
                pathType: Prefix
                service:
                  identifier: qbittorrent
                  port: 8080
        tls:
          - hosts:
              - qbt-vue.${DOMAIN}
            secretName: wildcard-le-tls-cert

      # vuetorrent service worker.
      vuetorrent-sw:
        className: tenant-root
        enabled: true
        hosts:
          - host: qbt-vue.${DOMAIN}
            paths:
              - path: /sw.js
                pathType: Exact
                service:
                  identifier: vuetorrent
                  port: http
        tls:
          - hosts:
              - qbt-vue.${DOMAIN}
            secretName: wildcard-le-tls-cert
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/network/network-policy.yaml
# NetworkPolicy to allow the Gluetun WireGuard VPN egress traffic only.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-gluetun-wireguard
  namespace: media
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: qbittorrent
  policyTypes: [Egress]
  egress:
    # Allow the WireGuard tunnel itself (the ONLY real Internet traffic)
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: UDP
          port: 51820
    # Allow plain DNS to your Blocky LB from the Gluetun container
    - to:
        - ipBlock:
            cidr: 192.168.222.100/32
      ports:
        - { protocol: UDP, port: 53 }
        - { protocol: TCP, port: 53 }
    # (Optional) allow cluster/LB networks directly (you already route-bypass these in Gluetun)
    - to:
        - ipBlock: { cidr: 10.96.0.0/12 }
        - ipBlock: { cidr: 10.244.0.0/16 }
        - ipBlock: { cidr: 192.168.222.0/24 }
