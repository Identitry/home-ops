---
# Namespace for Media.
apiVersion: v1
kind: Namespace
metadata:
  name: media
  labels:
    app.kubernetes.io/name: media
    app.kubernetes.io/instance: media
    pod-security.kubernetes.io/enforce: privileged
    ingress.svc.egress: allow # <--- opt-in label for ingress-controller traffic
---
# Media ReadWriteMany Persistent Volume.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-nfs-rwx
  labels:
    media-nfs: rwx
spec:
  capacity:
    storage: 10Ti
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  mountOptions:
    - nfsvers=4.2
    - hard
    - noatime
    - timeo=600
    - retrans=2
  nfs:
    server: ${FILESERVER_NFS_HOST}
    path: ${FILESERVER_SHARE_MEDIA_NFS_PATH}
---
# Media ReadOnlyMany Persistent Volume.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-nfs-rox
  labels:
    media-nfs: rox
spec:
  capacity:
    storage: 10Ti
  accessModes:
    - ReadOnlyMany
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  mountOptions:
    - ro # enforce read-only at the client
    - nfsvers=4.2
    - hard
    - noatime
    - timeo=600
    - retrans=2
  nfs:
    server: ${FILESERVER_NFS_HOST}
    path: ${FILESERVER_SHARE_MEDIA_NFS_PATH}
---
# Media ReadWriteMany Persistent Volume Claim.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-rwx
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Ti
  storageClassName: ""
  selector:
    matchLabels:
      media-nfs: rwx
---
# Media ReadOnlyMany Persistent Volume Claim.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-rox
  namespace: media
spec:
  accessModes:
    - ReadOnlyMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Ti
  storageClassName: ""
  selector:
    matchLabels:
      media-nfs: rox

---
# NetworkPolicy: allow ingress from the tenant-root namespace (Ingress controller lives there).
# Purpose: Let ingress controller reach any app Service/Pod in the media namespace on any port.
# Notes: Ingress traffic originates from pods in the `tenant-root` namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-from-tenant-root
  namespace: media
spec:
  podSelector: {}
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: tenant-root
---
# NetworkPolicy: allow DNS egress to CoreDNS (kube-system/kube-dns).
# Purpose: Service discovery and resolving cluster.local names (at least media namespace).
# Ports: TCP/UDP 53 only; adjust if you change CoreDNS service/labels.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress-namespace
  namespace: media
spec:
  podSelector: {} # all pods in 'media'
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
# NetworkPolicy: allow HTTPS egress to the Internet for all media pods.
# Purpose: Let apps fetch metadata/indexers/providers over TLS (TCP/443).
# Note: HTTP (TCP/80) is intentionally blocked; add a separate rule if needed.
# Security: Consider scoping with FQDN egress controllers if you want tighter control.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-https-egress-namespace
  namespace: media
spec:
  podSelector: {}
  policyTypes: ["Egress"]
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
---
# NetworkPolicy: allow all intra-namespace traffic for media (Ingress+Egress).
# Purpose: Apps in the media namespace can freely communicate with each other on any port.
# Rationale: Many media apps integrate bi-directionally (Plex/Jellyfin/Radarr/Sonarr/etc.).
# Scope: Only within the same namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-intra-namespace-all
  namespace: media
spec:
  podSelector: {}
  policyTypes: ["Ingress", "Egress"]
  ingress:
    - from:
        - podSelector: {} # any pod in the same namespace
  egress:
    - to:
        - podSelector: {} # any pod in the same namespace
---
# NetworkPolicy: allow external ingress to Jellyfin LoadBalancer (MetalLB-managed addresses).
# Purpose: Expose Jellyfin directly (bypasses ingress controller) on TCP 8096/8920.
# Source: 0.0.0.0/0 (public); rely on firewall/MetalLB IP assignment.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-jellyfin-external-ingress
  namespace: media
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 8096
        - protocol: TCP
          port: 8920

---
# NetworkPolicy: allow external ingress to Plex LoadBalancer (MetalLB-managed addresses).
# Purpose: Expose Plex directly (bypasses ingress controller) on TCP 32400 and discovery ports.
# Source: 0.0.0.0/0 (public); rely on firewall/MetalLB IP assignment.
# Note: Optional discovery ports included (GDM, DLNA). Remove lines you do not use.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-plex-external-ingress
  namespace: media
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: plex
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        # Core Plex web/API
        - protocol: TCP
          port: 32400
        # Optional: remote control / DLNA / discovery
        - protocol: TCP
          port: 8324 # Plex Companion
        - protocol: TCP
          port: 32469 # DLNA (TCP)
        - protocol: UDP
          port: 1900 # DLNA (SSDP)
        - protocol: UDP
          port: 32410 # GDM
        - protocol: UDP
          port: 32412 # GDM
        - protocol: UDP
          port: 32413 # GDM
        - protocol: UDP
          port: 32414 # GDM
---
# NetworkPolicy: qBittorrent (with Gluetun) egress allowlist.
# Purpose:
#   1) Allow WireGuard UDP/51820 to VPN providers on the Internet.
#   2) Allow DNS to Blocky pods (namespace `blocky`) on TCP/UDP 53 when Gluetun needs it.
# Notes:
#   - Intra-namespace communications are permitted by `allow-intra-namespace-all`.
#   - Ingress from `tenant-root` is permitted by `allow-ingress-from-tenant-root`.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: qbittorrent-egress
  namespace: media
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: qbittorrent
  policyTypes: [Egress]
  egress:
    # 1) WireGuard to the VPN servers
    - to:
        - ipBlock: { cidr: 0.0.0.0/0 }
      ports:
        - { protocol: UDP, port: 51820 }

    # 2) DNS to Blocky (via Service ClusterIP -> pod endpoints)
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: blocky
          podSelector:
            matchLabels:
              app.kubernetes.io/name: blocky
      ports:
        - { protocol: UDP, port: 53 }
        - { protocol: TCP, port: 53 }
---
# NetworkPolicy: Streamio/AIOStreams Gluetun egress allowlist.
# Purpose: Permit VPN tunnel (WireGuard UDP/51820) + DNS lookups to Blocky for the Gluetun-backed Streamio pods.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: streamio-egress
  namespace: media
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: streamio
      vpn: gluetun
  policyTypes: [Egress]
  egress:
    - to:
        - ipBlock: { cidr: 0.0.0.0/0 }
      ports:
        - { protocol: UDP, port: 51820 }
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: blocky
          podSelector:
            matchLabels:
              app.kubernetes.io/name: blocky
      ports:
        - { protocol: UDP, port: 53 }
        - { protocol: TCP, port: 53 }
