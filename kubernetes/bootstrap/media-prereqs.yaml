---
# Namespace for Media.
apiVersion: v1
kind: Namespace
metadata:
  name: media
  labels:
    app.kubernetes.io/name: media
    app.kubernetes.io/instance: media
    ingress.svc.egress: allow # <--- opt-in label for ingress-controller traffic
---
# Media ReadWriteMany Persistent Volume.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-nfs-rwx
  labels:
    media-nfs: rwx
spec:
  capacity:
    storage: 10Ti
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  mountOptions:
    - nfsvers=4.2
    - hard
    - noatime
    - timeo=600
    - retrans=2
  nfs:
    server: ${FILESERVER_NFS_HOST}
    path: ${FILESERVER_SHARE_MEDIA_NFS_PATH}
---
# Media ReadOnlyMany Persistent Volume.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-nfs-rox
  labels:
    media-nfs: rox
spec:
  capacity:
    storage: 10Ti
  accessModes:
    - ReadOnlyMany
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  mountOptions:
    - ro # enforce read-only at the client
    - nfsvers=4.2
    - hard
    - noatime
    - timeo=600
    - retrans=2
  nfs:
    server: ${FILESERVER_NFS_HOST}
    path: ${FILESERVER_SHARE_MEDIA_NFS_PATH}
---
# Media ReadWriteMany Persistent Volume Claim.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-rwx
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Ti
  storageClassName: ""
  selector:
    matchLabels:
      media-nfs: rwx
---
# Media ReadOnlyMany Persistent Volume Claim.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-rox
  namespace: media
spec:
  accessModes:
    - ReadOnlyMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Ti
  storageClassName: ""
  selector:
    matchLabels:
      media-nfs: rox

---
# NetworkPolicy to allow ingress from and egress to tenant-root (e.g., for backbone namespaces).
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: media-allow-tenant-root-bidirectional
  namespace: media
spec:
  podSelector: {} # Apply to all pods in the namespace
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: tenant-root
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: tenant-root
---
# NetworkPolicy to allow DNS egress to kube-system (CoreDNS).
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress-namespace
  namespace: media
spec:
  podSelector: {} # all pods in 'media'
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
# NetworkPolicy to allow HTTPS (TCP/443) egress for all pods in the namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-https-egress-namespace
  namespace: media
spec:
  podSelector: {}
  policyTypes: ["Egress"]
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress-media-to-media
  namespace: media
spec:
  podSelector: {} # applies to all pods in media
  policyTypes: ["Egress"]
  egress:
    - to:
        - podSelector: {} # any pod in the same namespace
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 7878 # Radarr
        - protocol: TCP
          port: 8989 # Sonarr
